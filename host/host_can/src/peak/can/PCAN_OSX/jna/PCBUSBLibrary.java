package peak.can.PCAN_OSX.jna;

import peak.can.PCAN_OSX.jna.structures.tagTPCANMsg;
import peak.can.PCAN_OSX.jna.structures.tagTPCANTimestamp;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;

import java.nio.ByteBuffer;

/**
 * JNA Wrapper for library <b>PCBUSB</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface PCBUSBLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "PCBUSB";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(PCBUSBLibrary.JNA_LIBRARY_NAME);
	public static final PCBUSBLibrary INSTANCE = (PCBUSBLibrary)Native.loadLibrary(PCBUSBLibrary.JNA_LIBRARY_NAME, PCBUSBLibrary.class);
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * = 0
	 */
	public static final int PCAN_NONEBUS = (int)0x00;
	public static final int PCAN_USBBUS1 = (int)0x51;
	public static final int PCAN_USBBUS2 = (int)0x52;
	public static final int PCAN_USBBUS3 = (int)0x53;
	public static final int PCAN_USBBUS4 = (int)0x54;
	public static final int PCAN_USBBUS5 = (int)0x55;
	public static final int PCAN_USBBUS6 = (int)0x56;
	public static final int PCAN_USBBUS7 = (int)0x57;
	public static final int PCAN_USBBUS8 = (int)0x58;
	public static final int PCAN_ERROR_OK = (int)0x00000;
	public static final int PCAN_ERROR_XMTFULL = (int)0x00001;
	public static final int PCAN_ERROR_OVERRUN = (int)0x00002;
	public static final int PCAN_ERROR_BUSLIGHT = (int)0x00004;
	public static final int PCAN_ERROR_BUSHEAVY = (int)0x00008;
	public static final int PCAN_ERROR_BUSOFF = (int)0x00010;
	public static final int PCAN_ERROR_ANYBUSERR = (int)(0x00004 | 0x00008 | 0x00010);
	public static final int PCAN_ERROR_QRCVEMPTY = (int)0x00020;
	public static final int PCAN_ERROR_QOVERRUN = (int)0x00040;
	public static final int PCAN_ERROR_QXMTFULL = (int)0x00080;
	public static final int PCAN_ERROR_REGTEST = (int)0x00100;
	public static final int PCAN_ERROR_NODRIVER = (int)0x00200;
	public static final int PCAN_ERROR_HWINUSE = (int)0x00400;
	public static final int PCAN_ERROR_NETINUSE = (int)0x00800;
	public static final int PCAN_ERROR_ILLHW = (int)0x01400;
	public static final int PCAN_ERROR_ILLNET = (int)0x01800;
	public static final int PCAN_ERROR_ILLCLIENT = (int)0x01C00;
	public static final int PCAN_ERROR_ILLHANDLE = (int)(0x01400 | 0x01800 | 0x01C00);
	public static final int PCAN_ERROR_RESOURCE = (int)0x02000;
	public static final int PCAN_ERROR_ILLPARAMTYPE = (int)0x04000;
	public static final int PCAN_ERROR_ILLPARAMVAL = (int)0x08000;
	public static final int PCAN_ERROR_UNKNOWN = (int)0x10000;
	public static final int PCAN_ERROR_ILLDATA = (int)0x20000;
	public static final int PCAN_ERROR_INITIALIZE = (int)0x40000;
	public static final int PCAN_ERROR_ILLOPERATION = (int)0x80000;
	public static final int PCAN_NONE = (int)0x00;
	public static final int PCAN_PEAKCAN = (int)0x01;
	public static final int PCAN_ISA = (int)0x02;
	public static final int PCAN_DNG = (int)0x03;
	public static final int PCAN_PCI = (int)0x04;
	public static final int PCAN_USB = (int)0x05;
	public static final int PCAN_PCC = (int)0x06;
	public static final int PCAN_DEVICE_NUMBER = (int)0x01;
	public static final int PCAN_5VOLTS_POWER = (int)0x02;
	public static final int PCAN_RECEIVE_EVENT = (int)0x03;
	public static final int PCAN_MESSAGE_FILTER = (int)0x04;
	public static final int PCAN_API_VERSION = (int)0x05;
	public static final int PCAN_CHANNEL_VERSION = (int)0x06;
	public static final int PCAN_BUSOFF_AUTORESET = (int)0x07;
	public static final int PCAN_LISTEN_ONLY = (int)0x08;
	public static final int PCAN_LOG_LOCATION = (int)0x09;
	public static final int PCAN_LOG_STATUS = (int)0x0A;
	public static final int PCAN_LOG_CONFIGURE = (int)0x0B;
	public static final int PCAN_LOG_TEXT = (int)0x0C;
	public static final int PCAN_CHANNEL_CONDITION = (int)0x0D;
	public static final int PCAN_HARDWARE_NAME = (int)0x0E;
	public static final int PCAN_RECEIVE_STATUS = (int)0x0F;
	public static final int PCAN_CONTROLLER_NUMBER = (int)0x10;
	public static final int PCAN_TRACE_LOCATION = (int)0x11;
	public static final int PCAN_TRACE_STATUS = (int)0x12;
	public static final int PCAN_TRACE_SIZE = (int)0x13;
	public static final int PCAN_TRACE_CONFIGURE = (int)0x14;
	public static final int PCAN_CHANNEL_IDENTIFYING = (int)0x15;
	public static final int PCAN_EXT_BTR0BTR1 = (int)0x80;
	public static final int PCAN_EXT_TX_COUNTER = (int)0x81;
	public static final int PCAN_EXT_RX_COUNTER = (int)0x82;
	public static final int PCAN_EXT_ERR_COUNTER = (int)0x83;
	public static final int PCAN_EXT_RX_QUE_OVERRUN = (int)0x84;
	public static final int PCAN_EXT_HARDWARE_VERSION = (int)133;
	public static final int PCAN_EXT_SOFTWARE_VERSION = (int)134;
	public static final int PCAN_EXT_RECEIVE_CALLBACK = (int)135;
	public static final int PCAN_EXT_LOG_USB = (int)0x8F;
	public static final int PCAN_PARAMETER_OFF = (int)0x00;
	public static final int PCAN_PARAMETER_ON = (int)0x01;
	public static final int PCAN_FILTER_CLOSE = (int)0x00;
	public static final int PCAN_FILTER_OPEN = (int)0x01;
	public static final int PCAN_FILTER_CUSTOM = (int)0x02;
	public static final int PCAN_CHANNEL_UNAVAILABLE = (int)0x00;
	public static final int PCAN_CHANNEL_AVAILABLE = (int)0x01;
	public static final int PCAN_CHANNEL_OCCUPIED = (int)0x02;
	public static final int LOG_FUNCTION_DEFAULT = (int)0x00;
	public static final int LOG_FUNCTION_ENTRY = (int)0x01;
	public static final int LOG_FUNCTION_PARAMETERS = (int)0x02;
	public static final int LOG_FUNCTION_LEAVE = (int)0x04;
	public static final int LOG_FUNCTION_WRITE = (int)0x08;
	public static final int LOG_FUNCTION_READ = (int)0x10;
	public static final int LOG_FUNCTION_ALL = (int)0xFFFF;
	public static final int TRACE_FILE_SINGLE = (int)0x00;
	public static final int TRACE_FILE_SEGMENTED = (int)0x01;
	public static final int TRACE_FILE_DATE = (int)0x02;
	public static final int TRACE_FILE_TIME = (int)0x04;
	public static final int TRACE_FILE_OVERWRITE = (int)0x80;
	public static final int PCAN_MESSAGE_STANDARD = (int)0x00;
	public static final int PCAN_MESSAGE_RTR = (int)0x01;
	public static final int PCAN_MESSAGE_EXTENDED = (int)0x02;
	public static final int PCAN_MESSAGE_STATUS = (int)0x80;
	public static final int PCAN_MODE_STANDARD = (int)0x00;
	public static final int PCAN_MODE_EXTENDED = (int)0x02;
	public static final int PCAN_BAUD_1M = (int)0x0014;
	public static final int PCAN_BAUD_800K = (int)0x0016;
	public static final int PCAN_BAUD_500K = (int)0x001C;
	public static final int PCAN_BAUD_250K = (int)0x011C;
	public static final int PCAN_BAUD_125K = (int)0x031C;
	public static final int PCAN_BAUD_100K = (int)0x432F;
	public static final int PCAN_BAUD_95K = (int)0xC34E;
	public static final int PCAN_BAUD_83K = (int)0x852B;
	public static final int PCAN_BAUD_50K = (int)0x472F;
	public static final int PCAN_BAUD_47K = (int)0x1414;
	public static final int PCAN_BAUD_33K = (int)0x8B2F;
	public static final int PCAN_BAUD_20K = (int)0x532F;
	public static final int PCAN_BAUD_10K = (int)0x672F;
	public static final int PCAN_BAUD_5K = (int)0x7F7F;
	/**
	 * @brief       Initializes a PCAN Channel.<br>
	 *  @param[in]   Channel    The handle of a PCAN Channel.<br>
	 *  @param[in]   Btr0Btr1   The speed for the communication (BTR0BTR1 code).<br>
	 *  @param[in]   HwType     (not used with PCAN USB devices)<br>
	 *  @param[in]   IOPort     (not used with PCAN USB devices)<br>
	 *  @param[in]   Interrupt  (not used with PCAN USB devices)<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_Initialize(unsigned char, unsigned short, unsigned char, unsigned long, unsigned short)</code><br>
	 * <i>native declaration : line 266</i>
	 */
	NativeLong CAN_Initialize(byte Channel, short Btr0Btr1, byte HwType, NativeLong IOPort, short Interrupt);
	/**
	 * @brief       Uninitializes one or all PCAN Channels initialized by CAN_Initialize.<br>
	 *  @note        Giving the TPCANHandle value "PCAN_NONEBUS" uninitializes all initialized channels.<br>
	 *  @param[in]   Channel    The handle of a PCAN Channel.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_Uninitialize(unsigned char)</code><br>
	 * <i>native declaration : line 281</i>
	 */
	NativeLong CAN_Uninitialize(byte Channel);
	/**
	 * @brief       Resets the receive and transmit queues of the PCAN Channel.<br>
	 *  @note        A reset of the CAN controller is not performed.<br>
	 *  @param[in]   Channel    The handle of a PCAN Channel.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_Reset(unsigned char)</code><br>
	 * <i>native declaration : line 292</i>
	 */
	NativeLong CAN_Reset(byte Channel);
	/**
	 * @brief       Gets the current status of a PCAN Channel.<br>
	 *  @param[in]   Channel    The handle of a PCAN Channel.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_GetStatus(unsigned char)</code><br>
	 * <i>native declaration : line 301</i>
	 */
	NativeLong CAN_GetStatus(byte Channel);
	/**
	 * @brief       Reads a CAN message from the receive queue of a PCAN Channel.<br>
	 *  @param[in]   Channel          The handle of a PCAN Channel.<br>
	 *  @param[out]  MessageBuffer    A TPCANMsg structure buffer to store the CAN message.<br>
	 *  @param[out]  TimestampBuffer  A TPCANTimestamp structure buffer to get  the reception time of the message.<br>
	 *                                If this value is not desired, this parameter should be passed as NULL.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_Read(unsigned char, TPCANMsg*, TPCANTimestamp*)</code><br>
	 * <i>native declaration : line 313</i>
	 */
	NativeLong CAN_Read(byte Channel, tagTPCANMsg MessageBuffer, tagTPCANTimestamp TimestampBuffer);
	/**
	 * @brief       Transmits a CAN message.<br>
	 *  @param[in]   Channel        The handle of a PCAN Channel.<br>
	 *  @param[in]   MessageBuffer  A TPCANMsg buffer with the message to be sent.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_Write(unsigned char, TPCANMsg*)</code><br>
	 * <i>native declaration : line 325</i>
	 */
	NativeLong CAN_Write(byte Channel, tagTPCANMsg MessageBuffer);
	/**
	 * @brief       Configures the reception filter.<br>
	 *  @note        The message filter will be expanded with every call to  this function.<br>
	 *               If it is desired to reset the filter, please use the CAN_SetValue function.<br>
	 *  @param[in]   Channel    The handle of a PCAN Channel.<br>
	 *  @param[in]   FromID     The lowest CAN ID to be received.<br>
	 *  @param[in]   ToID       The highest CAN ID to be received.<br>
	 *  @param[in]   Mode       Message type, Standard (11-bit identifier) or Extended (29-bit identifier).<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_FilterMessages(unsigned char, unsigned long, unsigned long, unsigned char)</code><br>
	 * <i>native declaration : line 341</i>
	 */
	NativeLong CAN_FilterMessages(byte Channel, NativeLong FromID, NativeLong ToID, byte Mode);
	/**
	 * @brief       Retrieves a PCAN Channel value.<br>
	 *  @note        Parameters can be present or not according with the kind of Hardware (PCAN Channel) being used.<br>
	 *               If a parameter is not available, a PCAN_ERROR_ILLPARAMTYPE error will be returned.<br>
	 *  @param[in]   Channel       The handle of a PCAN Channel.<br>
	 *  @param[in]   Parameter     The TPCANParameter parameter to get.<br>
	 *  @param[out]  Buffer        Buffer for the parameter value.<br>
	 *  @param[in]   BufferLength  Size in bytes of the buffer.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_GetValue(unsigned char, unsigned char, void*, unsigned long)</code><br>
	 * <i>native declaration : line 359</i>
	 */
	NativeLong CAN_GetValue(byte Channel, byte Parameter, Pointer Buffer, NativeLong BufferLength);
	/**
	 * @brief       Configures or sets a PCAN Channel value.<br>
	 *  @note        Parameters can be present or not according with the kind of Hardware (PCAN Channel) being used.<br>
	 *               If a parameter is not available, a PCAN_ERROR_ILLPARAMTYPE error will be returned.<br>
	 *  @param[in]   Channel       The handle of a PCAN Channel.<br>
	 *  @param[in]   Parameter     The TPCANParameter parameter to set.<br>
	 *  @param[in]   Buffer        Buffer with the value to be set.<br>
	 *  @param[in]   BufferLength  Size in bytes of the buffer.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_SetValue(unsigned char, unsigned char, void*, unsigned long)</code><br>
	 * <i>native declaration : line 378</i>
	 */
	NativeLong CAN_SetValue(byte Channel, byte Parameter, Pointer Buffer, NativeLong BufferLength);
	/**
	 * @brief       Returns a descriptive text of a given TPCANStatus error code, in any desired language.<br>
	 *  @note        The current languages available for translation are:<br>
	 *               Neutral (0x00), German (0x07), English (0x09), Spanish (0x0A), Italian (0x10) and French (0x0C).<br>
	 *  @param[in]   Error     A TPCANStatus error code.<br>
	 *  @param[in]   Language  Indicates a 'Primary language ID'.<br>
	 *  @param[out]  Buffer    Buffer for a null terminated char array.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_GetErrorText(unsigned long, unsigned short, char*)</code><br>
	 * <i>native declaration : line 395</i><br>
	 * @deprecated use the safer methods {@link #CAN_GetErrorText(com.sun.jna.NativeLong, short, java.nio.ByteBuffer)} and {@link #CAN_GetErrorText(com.sun.jna.NativeLong, short, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong CAN_GetErrorText(NativeLong Error, short Language, Pointer Buffer);
	/**
	 * @brief       Returns a descriptive text of a given TPCANStatus error code, in any desired language.<br>
	 *  @note        The current languages available for translation are:<br>
	 *               Neutral (0x00), German (0x07), English (0x09), Spanish (0x0A), Italian (0x10) and French (0x0C).<br>
	 *  @param[in]   Error     A TPCANStatus error code.<br>
	 *  @param[in]   Language  Indicates a 'Primary language ID'.<br>
	 *  @param[out]  Buffer    Buffer for a null terminated char array.<br>
	 *  @returns     A TPCANStatus error code.<br>
	 * Original signature : <code>long CAN_GetErrorText(unsigned long, unsigned short, char*)</code><br>
	 * <i>native declaration : line 395</i>
	 */
	NativeLong CAN_GetErrorText(NativeLong Error, short Language, ByteBuffer Buffer);
}
