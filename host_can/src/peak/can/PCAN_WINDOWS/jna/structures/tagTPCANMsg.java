package peak.can.PCAN_WINDOWS.jna.structures;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagTPCANMsg extends Structure {
	/** 11/29-bit message identifier */
	public int ID;
	/** Type of the message */
	public byte MSGTYPE;
	/** Data Length Code of the message (0..8) */
	public byte LEN;
	/**
	 * Data of the message (DATA[0]..DATA[7])<br>
	 * C type : BYTE[8]
	 */
	public byte[] DATA = new byte[8];
	public tagTPCANMsg() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ID", "MSGTYPE", "LEN", "DATA");
	}
	/**
	 * @param ID 11/29-bit message identifier<br>
	 * @param MSGTYPE Type of the message<br>
	 * @param LEN Data Length Code of the message (0..8)<br>
	 * @param DATA Data of the message (DATA[0]..DATA[7])<br>
	 * C type : BYTE[8]
	 */
	public tagTPCANMsg(int ID, byte MSGTYPE, byte LEN, byte DATA[]) {
		super();
		this.ID = ID;
		this.MSGTYPE = MSGTYPE;
		this.LEN = LEN;
		if ((DATA.length != this.DATA.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.DATA = DATA;
	}
	public tagTPCANMsg(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagTPCANMsg implements Structure.ByReference {

	};
	public static class ByValue extends tagTPCANMsg implements Structure.ByValue {

	};
}
